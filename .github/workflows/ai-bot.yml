name: AI Repo Manager

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'

jobs:
  auto-bot:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install node-fetch octokit fs

      - name: Run AI bot
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          HF_API_TOKEN: ${{ secrets.HF_API_TOKEN }}
          BRANCH: main
        run: |
          node -e "
          import fetch from 'node-fetch';
          import { Octokit } from 'octokit';
          import fs from 'fs';

          const token = process.env.GH_TOKEN;
          const hfToken = process.env.HF_API_TOKEN;
          const octokit = new Octokit({ auth: token });
          const repoOwner = process.env.GITHUB_REPOSITORY.split('/')[0];
          const repoName = process.env.GITHUB_REPOSITORY.split('/')[1];
          const branch = process.env.BRANCH || 'main';

          async function listFiles(path='') {
            try {
              const { data } = await octokit.rest.repos.getContent({ owner: repoOwner, repo: repoName, path, ref: branch });
              let files = [];
              for(const item of data) {
                if(item.type==='file') files.push(item.path);
                else if(item.type==='dir') files = files.concat(await listFiles(item.path));
              }
              return files;
            } catch(e) { if(e.status===404) return []; else throw e; }
          }

          async function readFile(filePath) {
            try {
              const { data } = await octokit.rest.repos.getContent({ owner: repoOwner, repo: repoName, path: filePath, ref: branch });
              return { content: Buffer.from(data.content,'base64').toString('utf8'), sha: data.sha };
            } catch(e) { if(e.status===404) return null; else throw e; }
          }

          async function commitFile(path, content, message, sha=null) {
            await octokit.rest.repos.createOrUpdateFileContents({
              owner: repoOwner, repo: repoName, path, message,
              content: Buffer.from(content).toString('base64'), sha, branch
            });
            console.log('Committed:', path);
          }

          async function deleteFile(path, sha) {
            await octokit.rest.repos.deleteFile({ owner: repoOwner, repo: repoName, path, message:'AI: Deleted file', sha, branch });
            console.log('Deleted:', path);
          }

          async function generateContent(prompt) {
            const res = await fetch('https://api-inference.huggingface.co/models/bigcode/starcoder', {
              method:'POST',
              headers:{ 'Authorization':'Bearer ' + hfToken, 'Content-Type':'application/json' },
              body: JSON.stringify({ inputs: prompt, parameters: { max_new_tokens: 500, temperature:0.7 } })
            });
            const data = await res.json();
            return data[0].generated_text;
          }

          async function autoManageFiles() {
            const files = await listFiles();

            for(const f of files) {
              if(f.endsWith('.temp')) {
                const fileData = await readFile(f);
                await deleteFile(f, fileData.sha);
              }
            }

            const targetFiles = ['src/main.js','docs/INSTRUCTIONS.md','data/info.json'];

            for(const f of targetFiles) {
              const fileData = await readFile(f);
              const prompt = fileData
                ? 'Improve or fix this file, add instructions/comments:\n' + fileData.content
                : 'Create a new file with useful code/info for the project. Include instructions, examples, content.';
              
              const newContent = await generateContent(prompt);
              await commitFile(f, newContent, 'AI: Created/Updated file', fileData?.sha);
            }
          }

          autoManageFiles().catch(console.error);
          "                const fileData = await readFile(f);
                await deleteFile(f, fileData.sha);
              }
            }

            // 3. Decide which files to create or update
            const targetFiles = [
              'src/main.js',
              'docs/INSTRUCTIONS.md',
              'data/info.json'
            ];

            for(const f of targetFiles) {
              const fileData = await readFile(f);
              const prompt = fileData
                ? 'Improve or fix this file, add instructions or comments as needed:\n' + fileData.content
                : 'Create a new file with useful code or information for the project. Include instructions, examples, and content.';
              
              const newContent = await generateContent(prompt);
              await commitFile(f, newContent, 'AI: Created/Updated file automatically', fileData?.sha);
            }
          }

          autoManageFiles().catch(console.error);
          "

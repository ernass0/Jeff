name: AI Repo Bot

on:
  workflow_dispatch: # manually trigger
  schedule:
    - cron: '0 * * * *' # runs every hour

jobs:
  ai-bot:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          npm install @azure-rest/ai-inference @azure/core-auth octokit fs

      - name: Run AI Bot
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          AZURE_API_KEY: ${{ secrets.AZURE_API_KEY }} # optional if using Azure
          BRANCH: main
        run: |
          node -e "
          const { Octokit } = require('octokit');
          const { ModelClient, isUnexpected } = require('@azure-rest/ai-inference');
          const { AzureKeyCredential } = require('@azure/core-auth');
          const fs = require('fs');

          const token = process.env.GH_TOKEN;
          const octokit = new Octokit({ auth: token });
          const repoOwner = process.env.GITHUB_REPOSITORY.split('/')[0];
          const repoName = process.env.GITHUB_REPOSITORY.split('/')[1];
          const branch = process.env.BRANCH || 'main';

          const client = ModelClient('https://models.github.ai/inference', new AzureKeyCredential(process.env.AZURE_API_KEY));

          async function listFiles(path='') {
            const { data } = await octokit.rest.repos.getContent({ owner: repoOwner, repo: repoName, path, ref: branch });
            let files = [];
            for (const item of data) {
              if(item.type === 'file') files.push(item.path);
              else if(item.type === 'dir') files = files.concat(await listFiles(item.path));
            }
            return files;
          }

          async function readFile(filePath) {
            try {
              const { data } = await octokit.rest.repos.getContent({ owner: repoOwner, repo: repoName, path: filePath, ref: branch });
              return { content: Buffer.from(data.content, 'base64').toString('utf8'), sha: data.sha };
            } catch(e) { if(e.status===404) return null; else throw e; }
          }

          async function commitFile(path, content, message, sha) {
            await octokit.rest.repos.createOrUpdateFileContents({
              owner: repoOwner, repo: repoName, path, message, content: Buffer.from(content).toString('base64'), sha, branch
            });
            console.log('Committed:', path);
          }

          async function generateCode(prompt) {
            const response = await client.path('/chat/completions').post({
              body: { messages:[{role:'system',content:'You are a coding assistant.'},{role:'user',content:prompt}], model:'openai/gpt-4.1', temperature:0.7 }
            });
            if(isUnexpected(response)) throw response.body.error;
            return response.body.choices[0].message.content;
          }

          async function autoUpdate() {
            const files = await listFiles();
            for(const file of files){
              const fileData = await readFile(file);
              const prompt = fileData ? 'Check this file for bugs, improve, update functions if needed:\n' + fileData.content : 'Create a new file with placeholder code.';
              const newCode = await generateCode(prompt);
              await commitFile(file,newCode,'AI: Updated automatically',fileData?.sha);
            }
          }

          autoUpdate().catch(console.error);
          "

name: AI Code Updater

on:
  push:
    paths:
      - 'AI_COMMANDS.md'   # Only triggers when this file changes
  workflow_dispatch:       # Allows manual run

jobs:
  update-code:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install @azure-rest/ai-inference @azure/core-auth octokit fs

      - name: Run AI Code Updater
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          AZURE_API_KEY: ${{ secrets.AZURE_API_KEY }}
          BRANCH: main
        run: |
          node -e "
          const { Octokit } = require('octokit');
          const { ModelClient, isUnexpected } = require('@azure-rest/ai-inference');
          const { AzureKeyCredential } = require('@azure/core-auth');
          const fs = require('fs');

          const token = process.env.GH_TOKEN;
          const octokit = new Octokit({ auth: token });
          const repoOwner = process.env.GITHUB_REPOSITORY.split('/')[0];
          const repoName = process.env.GITHUB_REPOSITORY.split('/')[1];
          const branch = process.env.BRANCH || 'main';

          const client = ModelClient('https://models.github.ai/inference', new AzureKeyCredential(process.env.AZURE_API_KEY));

          async function readFile(filePath) {
            try {
              const { data } = await octokit.rest.repos.getContent({ owner: repoOwner, repo: repoName, path: filePath, ref: branch });
              return { content: Buffer.from(data.content,'base64').toString('utf8'), sha: data.sha };
            } catch(e) { if(e.status===404) return null; else throw e; }
          }

          async function commitFile(path, content, message, sha=null) {
            await octokit.rest.repos.createOrUpdateFileContents({
              owner: repoOwner,
              repo: repoName,
              path,
              message,
              content: Buffer.from(content).toString('base64'),
              sha,
              branch
            });
            console.log('Committed:', path);
          }

          async function generateCode(prompt) {
            const response = await client.path('/chat/completions').post({
              body: { 
                messages: [
                  { role:'system', content:'You are an AI coding assistant. You read instructions and generate or update code files accordingly.' },
                  { role:'user', content: prompt }
                ], 
                model:'openai/gpt-4.1', 
                temperature:0.7
              }
            });
            if(isUnexpected(response)) throw response.body.error;
            return response.body.choices[0].message.content;
          }

          async function main() {
            const instructionsFile = 'AI_COMMANDS.md';
            const instructions = await readFile(instructionsFile);
            if(!instructions) return console.log('Instructions file not found.');

            // Parse instructions and decide which files to update
            // You can customize this mapping
            const targetFiles = [
              'src/main.js',
              'src/lib/util.js',
              'src/lib/db.js'
            ];

            for(const f of targetFiles) {
              const existing = await readFile(f);
              const prompt = existing
                ? 'Update this code file based on instructions:\n' + instructions.content + '\nCurrent content:\n' + existing.content
                : 'Create a new code file based on instructions:\n' + instructions.content;

              const newContent = await generateCode(prompt);
              await commitFile(f, newContent, 'AI: Updated code based on instructions', existing?.sha);
            }
          }

          main().catch(console.error);
          "
